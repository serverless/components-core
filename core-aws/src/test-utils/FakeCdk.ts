import { App } from 'aws-cdk-lib';
import { existsSync, readFileSync } from 'fs';
import path from 'path';
import Cdk from '../Cdk';
import FakeComponentContext from './FakeComponentContext';

type CloudFormationTemplate = {
  Resources: Record<string, { Properties: Record<string, any> }>;
  Outputs: Record<string, { Description: string; Value: unknown }>;
};

export default class FakeCdk extends Cdk {
  private readonly outputs: Record<string, string>;

  constructor(artifactDirectory: string, outputs: Record<string, string> = {}) {
    super(new FakeComponentContext(), 'stack-name', {
      region: 'us-east-1',
    });

    this.artifactDirectory = artifactDirectory;
    this.outputs = outputs;
  }

  /**
   * In tests, the deployment will simply compile the CloudFormation template
   * so that we can assert against it.
   */
  async deploy(appInit: (app: App) => void): Promise<boolean> {
    const app = new App({
      outdir: this.artifactDirectory,
    });
    appInit(app);
    app.synth();
    return true;
  }

  async remove(): Promise<void> {
    // nothing to do
  }

  async getAccountId(): Promise<string> {
    return '1234567890';
  }

  async getStackOutputs(): Promise<Record<string, string>> {
    return this.outputs;
  }

  async getGeneratedTemplate(componentId: string): Promise<CloudFormationTemplate> {
    const templatePath = path.join(this.artifactDirectory, `${componentId}-dev.template.json`);
    if (!existsSync(templatePath)) {
      throw new Error('No CloudFormation template was generated by the CDK');
    }
    return JSON.parse(readFileSync(templatePath).toString());
  }
}
